5)

<h1>Sai Pranathi Polisetti</h1>
<h1>1001728199</h1>
<br>

@app.route('/', methods=["GET"])
def get_index_page():
    return render_template('index.html', result={})
	
	
6)

<h1>Sai Pranathi Polisetti</h1>
<h1>1001728199</h1>
<br>


<table>
	<tr>
		<th>Name</th>
		<th>Size</th>
	</tr>

{% for item in result %}
	<tr>
		<td>{{ item["Key"] }}</td>
		<td>{{ item["Size"] }}</td>
	</tr>
{% endfor %}
</table>

@app.route('/list_pics', methods=["GET"])
def list_pics():
	# sending get request and saving the response as response object 
	data = requests.get(base_url)
	parse_dict = xmltodict.parse(data.text)
	image_data = parse_dict["ListBucketResult"]["Contents"]
# 	
	return render_template('list_pics.html', result=image_data)
	
	
7)

<h1>Sai Pranathi Polisetti</h1>
<h1>1001728199</h1>
<br>

<form action="display_room" method="post">
	<label>Enter Room Number</label>
	<input type="number" name="room" value="">
	<br>
	<input type="submit" name="update_data" value="View Details">
</form>
<table>

{% if result == 0 %}
	<td> Check inputs!!!.. Nothing to display</td>
{% else %}
	{% for item in result["list"] %}
	<tr>
		<td>{{ item["NAME"] }}</td>
		<td>{{ item["KEYWORDS"] }}</td>
		{% if item["PICTURE"] != None %}
			<td><img src={{ "http://s3.us-east.cloud-object-storage.appdomain.cloud/adb-sum/" }}{{item['PICTURE']}}  height="200px"></td>
		{% else %}
			<td>No image to display for this name</td>
		{% endif %}
	</tr>
	{% endfor %}
{% endif %}

</table>


@app.route('/display_room', methods=["GET"])
def display_room():
    ret = [];
    return render_template('display_room.html', result=ret)
  
 # search by name functi
@app.route('/display_room', methods=["POST"])
def display_room_name():
    name = str(request.form["room"])        
    
    if name == "":
        obj = 0
        return render_template('display_room.html', result=obj)
    print("ger")

    sql = " select * from names where ROOM = ?"
    stmt = ibm_db.prepare(connect.connection, sql)

    ibm_db.bind_param(stmt, 1, name)

    result = ibm_db.execute(stmt)
    
    ret = []
    result_dict = ibm_db.fetch_assoc(stmt)
    
    while result_dict is not False:
        ret.append(result_dict)
        result_dict = ibm_db.fetch_assoc(stmt)
        
    data = requests.get(base_url)
    parse_dict = xmltodict.parse(data.text)
    image_data = parse_dict["ListBucketResult"]["Contents"]
    
    img_lt = []
    for data in image_data:
        img_lt.append(data["Key"])
    
    if ret is not False:
        for key in ret:
            if key["PICTURE"] not in img_lt:
                key["PICTURE"] = None
        
    obj = {}
    obj['list'] = ret
 
    
    if name is "":
        obj = 0
        
    return render_template('display_room.html', result=obj)
	
8)
<h1>Sai Pranathi Polisetti</h1>
<h1>1001728199</h1>
<br>

<form action="display_details_point_room" method="post">
	<label>Enter larger point in Range</label>
	<input type="number" name="first" value="">
	<br>
	<label>Enter smaller point in Range</label>
	<input type="number" name="second" value="">
	<br>
	<label>Enter room number</label>
	<input type="number" name="room" value="">
	<br>
	<input type="submit" name="update_data" value="View details">
</form>
<table>

{% if result == 0 %}
	<td> Check inputs , all 3 inputs required!!!.. Nothing to display</td>
{% else %}
	{% for item in result["list"] %}
	<tr>
		<td>{{ item["NAME"] }}</td>
		<td>{{ item["STATE"] }}</td>
		{% if item["PICTURE"] != None %}
			<td><img src={{ "http://s3.us-east.cloud-object-storage.appdomain.cloud/adb-sum/" }}{{item['PICTURE']}}  height="200px"></td>
		{% else %}
			<td>No image to display for this name</td>
		{% endif %}
	</tr>
	{% endfor %}
{% endif %}

</table>

@app.route('/display_details_point_room', methods=["GET"])
def display_details_point_room():
    ret = [];
    return render_template('display_details_point_room.html', result=ret)
  
 # search by name functi
@app.route('/display_details_point_room', methods=["POST"])
def display_details_point_room_name():
    name = str(request.form["first"])        
    keyword = str(request.form["second"])
    room = str(request.form["room"])
    
    if name == "" or keyword == "" or room == "":
        obj = 0
        return render_template('display_details_point_room.html', result=obj)

    sql = " select * from names where GRADE < ? and  GRADE >? and ROOM > ?"
    stmt = ibm_db.prepare(connect.connection, sql)

    ibm_db.bind_param(stmt, 1, name)
    ibm_db.bind_param(stmt, 2, keyword)
    ibm_db.bind_param(stmt, 3, keyword)
    result = ibm_db.execute(stmt)
    
    ret = []
    result_dict = ibm_db.fetch_assoc(stmt)
    
    while result_dict is not False:
        ret.append(result_dict)
        result_dict = ibm_db.fetch_assoc(stmt)
        
    data = requests.get(base_url)
    parse_dict = xmltodict.parse(data.text)
    image_data = parse_dict["ListBucketResult"]["Contents"]
    
    img_lt = []
    for data in image_data:
        img_lt.append(data["Key"])
    
    if ret is not False:
        for key in ret:
            if key["PICTURE"] not in img_lt:
                key["PICTURE"] = None
        
    obj = {}
    obj['list'] = ret
 
    
    if name is "" or keyword is "":
        obj = 0
        

    return render_template('display_details_point_room.html', result=obj)
	
9)
<h1>Sai Pranathi Polisetti</h1>
<h1>1001728199</h1>
<br>

<form action="modify_name_room_number" method="post">
	<label>Enter the Room number for which updation is required</label>
	<input type="number" name="room" value="">
	<br>
	<label>Enter the new Name</label>
	<input type="name" name="name" value="">
	<br>
	<input type="submit" name="update_keyword" value="Update Room">
</form>


<br>

{% if result == 0 %}
	<h4>No update!!! Check inputs</h4>

{% else %}
	<h4>Update Successful</h4>
{% endif %}

@app.route('/modify_name_room_number', methods=["GET"])
def modify_name_room_number():
    ret = [];
    return render_template('modify_name_room_number.html', result=ret)
  
# search by name function
@app.route('/modify_name_room_number', methods=["POST"])
def modify_name_room_number_name():
    name = str(request.form["name"])        
    room = str(request.form["room"])
    
    if name == "" or room == "":
        result= 0
        return render_template('modify_name_room_number.html', result=result)
  
    sql = "UPDATE names SET NAME = ? WHERE  ROOM=?"
    stmt = ibm_db.prepare(connect.connection, sql)
  
    ibm_db.bind_param(stmt, 1, name)
    ibm_db.bind_param(stmt, 2, room)
      
    result = ibm_db.execute(stmt)
      
    result = ibm_db.num_rows(stmt)
      
    return render_template('modify_name_room_number.html', result=result)